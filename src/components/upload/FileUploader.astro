---
/**
 * File Uploader Component
 */
import { parserRegistry } from '../../core/parsers/index.js';

// Get the supported file extensions
const supportedExtensions = parserRegistry.getSupportedExtensions();
const supportedFormats = parserRegistry.getSupportedFileTypes();
---

<div id="file-uploader" class="file-uploader">
  <div 
    id="drop-zone" 
    class="drop-zone bg-white border-2 border-dashed border-primary-300 rounded-xl p-10 text-center transition-all duration-300 ease-in-out"
  >
    <div class="icon-container mb-4">
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        width="48" 
        height="48" 
        viewBox="0 0 24 24" 
        fill="none" 
        stroke="currentColor" 
        stroke-width="2" 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        class="text-primary-500 mx-auto"
      >
        <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path>
        <path d="M12 12v9"></path>
        <path d="m16 16-4-4-4 4"></path>
      </svg>
    </div>
    
    <h3 class="text-lg font-semibold mb-2">Drag & Drop Your Document</h3>
    <p class="text-gray-600 mb-4">or click to browse your files</p>
    
    <div class="supported-formats text-xs text-gray-500 mt-2">
      Supported formats: <span>{supportedFormats}</span>
    </div>
    
    <input 
      type="file" 
      id="file-input" 
      class="hidden" 
      accept={supportedExtensions.join(',')}
    />
    
    <button 
      id="browse-button" 
      class="mt-4 px-6 py-2 bg-primary-500 text-white rounded-lg shadow-sm hover:bg-primary-600 transition-colors"
    >
      Browse Files
    </button>
  </div>

  <div class="separator my-6 text-center text-gray-500">OR</div>

  <div id="paste-zone" class="paste-zone bg-white border border-gray-200 rounded-xl p-6">
    <h3 class="text-lg font-semibold mb-3">Paste Your Text Content</h3>
    <textarea
      id="text-input"
      rows="6"
      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-primary-500 focus:border-primary-500"
      placeholder="Paste your text here..."
    ></textarea>
    <button
      id="process-text-button"
      class="mt-4 px-6 py-2 bg-secondary-500 text-white rounded-lg shadow-sm hover:bg-secondary-600 transition-colors"
    >
      Process Pasted Text
    </button>
  </div>
  
  <div id="upload-progress" class="upload-progress hidden mt-6">
    <div class="flex justify-between text-sm mb-1">
      <span id="file-name" class="text-gray-700">filename.pdf</span>
      <span id="progress-percentage" class="text-primary-600">0%</span>
    </div>
    
    <div class="h-2 w-full bg-gray-200 rounded-full overflow-hidden">
      <div
        id="progress-bar"
        class="h-full bg-primary-500 transition-all duration-300 ease-out"
        style="width: 0%"
      ></div>
    </div>
  </div>
  
  <div id="error-message" class="error-message hidden mt-4 p-3 bg-red-100 text-red-800 rounded-lg">
    <p>Error processing input: <span id="error-text"></span></p>
  </div>
</div>

<script>
  // File upload functionality
  document.addEventListener('DOMContentLoaded', () => {
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('file-input');
    const browseButton = document.getElementById('browse-button');
    const uploadProgress = document.getElementById('upload-progress');
    const fileName = document.getElementById('file-name');
    const progressBar = document.getElementById('progress-bar');
    const progressPercentage = document.getElementById('progress-percentage');
    const errorMessage = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');
    const textInput = document.getElementById('text-input') as HTMLTextAreaElement | null;
    const processTextButton = document.getElementById('process-text-button');
    
    // Event: Click browse button
    browseButton?.addEventListener('click', () => {
      fileInput?.click();
    });
    
    // Event: File selected via input
    fileInput?.addEventListener('change', (event: Event) => { // Add type to event
      // Cast event.target to HTMLInputElement
      const input = event.target as HTMLInputElement | null;
      if (input?.files && input.files.length > 0) { // Check if input exists before accessing files
        handleFile(input.files[0]);
      }
    });
    
    // Event: Drag over drop zone
    dropZone?.addEventListener('dragover', (event) => {
      event.preventDefault();
      dropZone.classList.add('border-primary-500', 'bg-primary-50');
    });
    
    // Event: Drag leave drop zone
    dropZone?.addEventListener('dragleave', () => {
      dropZone.classList.remove('border-primary-500', 'bg-primary-50');
    });
    
    // Event: Drop file on drop zone
    dropZone?.addEventListener('drop', (event) => {
      event.preventDefault();
      dropZone.classList.remove('border-primary-500', 'bg-primary-50');
      
      if (event.dataTransfer?.files && event.dataTransfer.files.length > 0) {
        handleFile(event.dataTransfer.files[0]);
      }
    });

    // Event: Click process text button
    processTextButton?.addEventListener('click', () => {
      if (textInput?.value) {
        handlePastedText(textInput.value);
      } else {
        showError("Please paste some text before processing.");
      }
    });
    
    // Handle the uploaded file
    // Add type annotation for file parameter
    function handleFile(file: File) {
      // Hide any previous errors
      errorMessage?.classList.add('hidden');
      
      // Dispatch a custom event with the file
      const uploadEvent = new CustomEvent('file-selected', {
        detail: { file }
      });
      document.dispatchEvent(uploadEvent);
      
      // Show upload progress with file name
      if (uploadProgress && fileName && progressBar && progressPercentage) {
        fileName.textContent = file.name;
        uploadProgress.classList.remove('hidden');
        progressBar.style.width = '0%';
        progressPercentage.textContent = '0%';
        
        // Simulate upload progress (in a real app, this would track actual progress)
        let progress = 0;
        const interval = setInterval(() => {
          progress += 5;
          if (progress > 100) {
            clearInterval(interval);
            progress = 100;
            
            // Dispatch upload complete event
            document.dispatchEvent(new CustomEvent('file-upload-complete', {
              detail: { file }
            }));
          }
          
          progressBar.style.width = `${progress}%`;
          progressPercentage.textContent = `${progress}%`;
        }, 50);
      }
    }

    // Handle pasted text
    // Add type annotation for text parameter
    function handlePastedText(text: string) {
      // Hide any previous errors
      errorMessage?.classList.add('hidden');

      // Create a Blob and then a File object from the text
      const blob = new Blob([text], { type: 'text/plain' });
      // Use a generic filename, as we don't have one from pasting
      const file = new File([blob], "pasted_content.txt", { type: "text/plain" });

      // Dispatch the same event as file upload
      const pasteEvent = new CustomEvent('file-selected', {
        detail: { file }
      });
      document.dispatchEvent(pasteEvent);

      // Show progress (similar to file upload, but instant completion)
      if (uploadProgress && fileName && progressBar && progressPercentage) {
        fileName.textContent = file.name;
        uploadProgress.classList.remove('hidden');
        progressBar.style.width = '100%'; // Show as complete immediately
        progressPercentage.textContent = '100%';

        // Dispatch upload complete event immediately for pasted text
        document.dispatchEvent(new CustomEvent('file-upload-complete', {
          detail: { file }
        }));
      }
    }
    
    // Handle upload errors
    document.addEventListener('file-upload-error', (event) => {
      const customEvent = event as CustomEvent; // Add type cast
      const error = customEvent.detail?.error || 'Unknown error';
      
      showError(error);
    }); // End of file-upload-error listener

    // Helper to show errors (Moved outside the event listener)
    // Add type annotation for message parameter
    function showError(message: any) {
      if (errorMessage && errorText) {
        errorText.textContent = String(message); // Ensure message is a string
        errorMessage.classList.remove('hidden');
      }

      if (uploadProgress) {
        uploadProgress.classList.add('hidden');
      }
    } // End of showError function
  });
</script>

<style>
  .file-uploader {
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
  }
  
  .drop-zone {
    cursor: pointer;
  }
  
  .drop-zone:hover {
    background-color: rgba(99, 102, 241, 0.05);
    border-color: rgba(99, 102, 241, 0.5);
  }
</style>
