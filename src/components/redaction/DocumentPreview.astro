---
/**
 * Document Preview Component
 * 
 * Displays a preview of the document with redactions
 */
---

<div id="document-preview" class="hidden">
  <div class="bg-white rounded-xl shadow-card p-6 mb-6">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-xl font-semibold">Document Preview</h3>
      
      <div class="view-options flex space-x-2">
        <button 
          id="view-original-btn" 
          class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
        >
          Original
        </button>
        <button 
          id="view-redacted-btn" 
          class="px-3 py-1 text-sm bg-primary-100 text-primary-700 rounded-lg hover:bg-primary-200 transition-colors"
        >
          Redacted
        </button>
      </div>
    </div>
    
    <div id="document-metadata" class="text-sm text-gray-600 border-b border-gray-100 pb-3 mb-4">
      <div class="grid grid-cols-2 md:grid-cols-4 gap-2">
        <div>
          <span class="font-medium">Filename:</span> <span id="doc-filename">document.pdf</span>
        </div>
        <div>
          <span class="font-medium">Size:</span> <span id="doc-filesize">0 KB</span>
        </div>
        <div>
          <span class="font-medium">Words:</span> <span id="doc-wordcount">0</span>
        </div>
        <div>
          <span class="font-medium">Pages:</span> <span id="doc-pagecount">0</span>
        </div>
      </div>
    </div>
    
    <div class="preview-container mt-4 border border-gray-200 rounded-lg p-4 bg-gray-50 min-h-[300px] max-h-[600px] overflow-y-auto">
      <pre id="preview-content" class="text-sm font-sans whitespace-pre-wrap"></pre>
    </div>
  </div>
  
  <div class="actions text-center mb-8 flex justify-center space-x-4">
    <button
      id="copy-btn"
      class="px-8 py-3 bg-secondary-500 text-white rounded-lg shadow-md hover:bg-secondary-600 transition-colors"
    >
      Copy Redacted Content
    </button>
    <button
      id="download-btn"
      class="px-8 py-3 bg-primary-500 text-white rounded-lg shadow-md opacity-50 cursor-not-allowed"
      disabled
      title="feature coming soon gang ðŸ¥€ðŸ¥€ðŸ¥€"
    >
      Download Redacted Document
    </button>
  </div>
</div>

<script>
  // Document preview functionality
  document.addEventListener('DOMContentLoaded', () => {
    const documentPreview = document.getElementById('document-preview');
    const previewContent = document.getElementById('preview-content');
    const viewOriginalBtn = document.getElementById('view-original-btn');
    const viewRedactedBtn = document.getElementById('view-redacted-btn');
    const docFilename = document.getElementById('doc-filename');
    const docFilesize = document.getElementById('doc-filesize');
    const docWordcount = document.getElementById('doc-wordcount');
    const docPagecount = document.getElementById('doc-pagecount');
    const downloadBtn = document.getElementById('download-btn');
    const copyBtn = document.getElementById('copy-btn'); // Get reference to copy button
    
    let originalDocument: any = null; // Add types
    let redactedDocument: any = null; // Add types
    let currentView = 'original';
    
    // Event: Document parsed
    document.addEventListener('document-parsed', (event) => {
      const customEvent = event as CustomEvent; // Cast event
      originalDocument = customEvent.detail?.document;
      
      if (documentPreview && originalDocument) {
        // Store the document data as a data attribute for later use
        documentPreview.dataset.document = JSON.stringify(originalDocument);
        documentPreview.classList.remove('hidden');
        updateDocumentMetadata(originalDocument);
        updatePreviewContent(originalDocument.content);
        console.log("Document preview updated with parsed document data");
      }
    });
    
    // Event: Redactions applied
    document.addEventListener('redactions-applied', (event) => {
      const customEvent = event as CustomEvent; // Cast event
      redactedDocument = customEvent.detail?.document;
      
      if (redactedDocument) {
        currentView = 'redacted';
        updatePreviewContent(redactedDocument.content);
        
        // Store the redacted document for download
        // Add null check for documentPreview before accessing dataset
        if (documentPreview) {
          documentPreview.dataset.redactedDocument = JSON.stringify(redactedDocument);
        }
        
        // Activate the redacted view button
        if (viewOriginalBtn && viewRedactedBtn) {
          viewOriginalBtn.classList.remove('bg-primary-100', 'text-primary-700');
          viewOriginalBtn.classList.add('bg-gray-100', 'text-gray-700');
          
          viewRedactedBtn.classList.remove('bg-gray-100', 'text-gray-700');
          viewRedactedBtn.classList.add('bg-primary-100', 'text-primary-700');
        }
      }
    });
    
    // Event: View original button
    viewOriginalBtn?.addEventListener('click', () => {
      if (originalDocument) {
        currentView = 'original';
        updatePreviewContent(originalDocument.content);
        
        // Update button styles
        viewOriginalBtn.classList.remove('bg-gray-100', 'text-gray-700');
        viewOriginalBtn.classList.add('bg-primary-100', 'text-primary-700');
        
        viewRedactedBtn?.classList.remove('bg-primary-100', 'text-primary-700');
        viewRedactedBtn?.classList.add('bg-gray-100', 'text-gray-700');
      }
    });
    
    // Event: View redacted button
    viewRedactedBtn?.addEventListener('click', () => {
      if (redactedDocument) {
        currentView = 'redacted';
        updatePreviewContent(redactedDocument.content);
        
        // Update button styles
        viewRedactedBtn.classList.remove('bg-gray-100', 'text-gray-700');
        viewRedactedBtn.classList.add('bg-primary-100', 'text-primary-700');
        
        viewOriginalBtn?.classList.remove('bg-primary-100', 'text-primary-700');
        viewOriginalBtn?.classList.add('bg-gray-100', 'text-gray-700');
      }
    });
    
    // Event listener for download button removed as it's disabled
    // Event: Copy button
    copyBtn?.addEventListener('click', async () => {
      if (redactedDocument?.content) {
        try {
          await navigator.clipboard.writeText(redactedDocument.content);
          // Provide feedback
          // Cast copyBtn to HTMLButtonElement to access disabled property
          const button = copyBtn as HTMLButtonElement | null;
          if (button) {
            const originalText = button.textContent;
            button.textContent = 'Copied!';
            button.disabled = true;
            setTimeout(() => {
              // Check button still exists before modifying
              if (button) {
                 button.textContent = originalText;
                 button.disabled = false;
              }
            }, 1500); // Reset after 1.5 seconds
          }
        } catch (err) { // Correctly placed catch block
          console.error('Failed to copy text: ', err);
          alert('Failed to copy content to clipboard.');
        }
      } else {
        console.error("No redacted content to copy!");
        alert('No redacted content available to copy.');
      }
    }); // End of copyBtn listener
    
    // --- Helper functions defined within DOMContentLoaded scope ---

    // Update document metadata display
    function updateDocumentMetadata(document: any) {
      if (docFilename) {
        docFilename.textContent = document.filename;
      }
      if (docFilesize) {
        docFilesize.textContent = formatFileSize(document.fileSize);
      }
      if (docWordcount && document.metadata.wordCount !== undefined) {
        docWordcount.textContent = document.metadata.wordCount.toString();
      }
      if (docPagecount && document.metadata.pageCount !== undefined) {
        docPagecount.textContent = document.metadata.pageCount.toString();
      }
    }

    // Update preview content
    function updatePreviewContent(content: string) {
      if (previewContent) {
        previewContent.textContent = content;
      }
    }

    // Format file size for display
    function formatFileSize(bytes: number): string {
      if (bytes === null || bytes === undefined) return 'N/A'; // Handle null/undefined bytes
      if (bytes < 1024) {
        return bytes + ' bytes';
      } else if (bytes < 1024 * 1024) {
        return (bytes / 1024).toFixed(1) + ' KB';
      } else if (bytes < 1024 * 1024 * 1024) {
        return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
      } else {
        return (bytes / (1024 * 1024 * 1024)).toFixed(1) + ' GB';
      }
    }
  }); // End of DOMContentLoaded listener
</script>
