---
/**
 * Main App Component
 * 
 * Orchestrates the document redaction workflow
 */
import FileUploader from './upload/FileUploader.astro';
import SensitiveItemsList from './redaction/SensitiveItemsList.astro';
import DocumentPreview from './redaction/DocumentPreview.astro';
---

<main class="container mx-auto px-4 py-8">
  <div class="app-steps space-y-8">
    <section id="step-upload" class="step">
      <div class="step-header flex items-center mb-4">
        <div class="step-number w-8 h-8 rounded-full bg-primary-500 text-white flex items-center justify-center mr-3 font-medium">
          1
        </div>
        <h2 class="text-2xl font-semibold">Upload Your Document</h2>
      </div>
      
      <FileUploader />
    </section>
    
    <section id="step-redact" class="step opacity-50 pointer-events-none transition-opacity duration-300">
      <div class="step-header flex items-center mb-4">
        <div class="step-number w-8 h-8 rounded-full bg-gray-300 text-white flex items-center justify-center mr-3 font-medium">
          2
        </div>
        <h2 class="text-2xl font-semibold">Review & Select Content to Redact</h2>
      </div>
      
      <SensitiveItemsList />
    </section>
    
    <section id="step-preview" class="step opacity-50 pointer-events-none transition-opacity duration-300">
      <div class="step-header flex items-center mb-4">
        <div class="step-number w-8 h-8 rounded-full bg-gray-300 text-white flex items-center justify-center mr-3 font-medium">
          3
        </div>
        <h2 class="text-2xl font-semibold">Review & Download</h2>
      </div>
      
      <DocumentPreview />
    </section>
  </div>
</main>

<script>
  // We need to fix the issues with imports
  // For client-side scripts, we'll directly include the necessary functionality
  
  document.addEventListener('DOMContentLoaded', () => {
    const stepUpload = document.getElementById('step-upload');
    const stepRedact = document.getElementById('step-redact');
    const stepPreview = document.getElementById('step-preview');
    
    let currentFile = null;
    
    // Event: File selected
    document.addEventListener('file-selected', async (event) => {
      try {
        const customEvent = event;
        currentFile = customEvent.detail?.file;
        
        if (!currentFile) {
          throw new Error('No file selected');
        }
        
        console.log("File selected:", currentFile.name, currentFile.type);
        
        // Reset the UI state
        resetUIState();
        
        // For debugging purposes, let's log what's happening
        console.log("Waiting for upload to complete...");
        
        // Wait for upload to complete
        await new Promise(resolve => {
          document.addEventListener('file-upload-complete', resolve, { once: true });
        });
        
        console.log("Upload complete! Processing document...");
        
        // Simulate parsing and analysis
        setTimeout(() => {
          console.log("Document processed!");
          
          // Create some sample sensitive items for testing
          const sampleItems = [
            {
              id: 'item1',
              text: 'John Doe',
              category: 'name',
              positions: [{ sectionId: 'section1', start: 0, end: 8 }],
              confidence: 0.9,
              selected: true
            },
            {
              id: 'item2',
              text: 'johndoe@example.com',
              category: 'email',
              positions: [{ sectionId: 'section1', start: 10, end: 28 }],
              confidence: 0.95,
              selected: true
            },
            {
              id: 'item3',
              text: '123-456-7890',
              category: 'phone',
              positions: [{ sectionId: 'section1', start: 30, end: 42 }],
              confidence: 0.85,
              selected: true
            }
          ];
          
          // Trigger the sensitive items detected event
          document.dispatchEvent(new CustomEvent('sensitive-items-detected', {
            detail: { items: sampleItems }
          }));
          
          // Create sample parsed document
          const sampleDocument = {
            content: `This is a sample document with some sensitive information like John Doe, johndoe@example.com, and 123-456-7890.`,
            metadata: {
              wordCount: 15,
              characterCount: 100,
              pageCount: 1
            },
            sections: [
              {
                id: 'section1',
                type: 'paragraph',
                content: `This is a sample document with some sensitive information like John Doe, johndoe@example.com, and 123-456-7890.`,
                position: { start: 0, end: 100 }
              }
            ],
            filename: currentFile.name,
            fileType: 'txt',
            fileSize: currentFile.size
          };
          
          // Trigger the document parsed event
          document.dispatchEvent(new CustomEvent('document-parsed', {
            detail: { document: sampleDocument }
          }));
          
          // Activate the redaction step
          activateStep(stepRedact);
        }, 1000);
        
      } catch (error) {
        console.error('Error processing file:', error);
        document.dispatchEvent(new CustomEvent('file-upload-error', {
          detail: { error: error.message }
        }));
      }
    });
    
    // Event: Apply redactions
    document.addEventListener('apply-redactions', (event) => {
      try {
        const customEvent = event;
        const selectedItems = customEvent.detail?.items || [];
        const options = customEvent.detail?.options || {};
        
        console.log("Applying redactions:", selectedItems, options);
        
        // Simulate redacted document
        const redactedDocument = {
          content: `This is a sample document with some sensitive information like [REDACTED], [REDACTED], and [REDACTED].`,
          metadata: {
            wordCount: 15,
            characterCount: 100,
            pageCount: 1
          },
          sections: [
            {
              id: 'section1',
              type: 'paragraph',
              content: `This is a sample document with some sensitive information like [REDACTED], [REDACTED], and [REDACTED].`,
              position: { start: 0, end: 100 }
            }
          ],
          filename: `redacted_${currentFile.name}`,
          fileType: 'txt',
          fileSize: currentFile.size
        };
        
        // Dispatch event with redacted document
        document.dispatchEvent(new CustomEvent('redactions-applied', {
          detail: { document: redactedDocument }
        }));
        
        // Activate the preview step
        activateStep(stepPreview);
      } catch (error) {
        console.error('Error applying redactions:', error);
        alert(`Error applying redactions: ${error.message}`);
      }
    });
    
    // Event: Download document
    document.addEventListener('download-document', async (event) => {
      try {
        const customEvent = event;
        const docToDownload = customEvent.detail?.document;
        
        if (!docToDownload) {
          throw new Error('No document to download');
        }
        
        console.log("Downloading document:", docToDownload.filename);
        
        // Create a simple text file download
        const blob = new Blob([docToDownload.content], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        // Create download link
        const a = document.createElement('a');
        a.href = url;
        a.download = docToDownload.filename;
        
        // Trigger download
        a.click();
        
        // Clean up
        setTimeout(() => {
          URL.revokeObjectURL(url);
        }, 100);
        
      } catch (error) {
        console.error('Error downloading document:', error);
        alert(`Error downloading document: ${error.message}`);
      }
    });
    
    // Reset the UI state
    function resetUIState() {
      // Hide redaction and preview steps
      if (stepRedact) {
        stepRedact.classList.add('opacity-50', 'pointer-events-none');
        document.querySelector('#step-redact .step-number')?.classList.remove('bg-primary-500');
        document.querySelector('#step-redact .step-number')?.classList.add('bg-gray-300');
      }
      
      if (stepPreview) {
        stepPreview.classList.add('opacity-50', 'pointer-events-none');
        document.querySelector('#step-preview .step-number')?.classList.remove('bg-primary-500');
        document.querySelector('#step-preview .step-number')?.classList.add('bg-gray-300');
      }
      
      // Hide document preview
      const documentPreview = document.getElementById('document-preview');
      if (documentPreview) {
        documentPreview.classList.add('hidden');
      }
      
      // Hide sensitive items list
      const sensitiveItemsList = document.getElementById('sensitive-items-list');
      if (sensitiveItemsList) {
        sensitiveItemsList.classList.add('hidden');
      }
    }
    
    // Activate a step in the UI
    function activateStep(stepElement) {
      if (!stepElement) return;
      
      stepElement.classList.remove('opacity-50', 'pointer-events-none');
      
      const stepNumber = stepElement.querySelector('.step-number');
      if (stepNumber) {
        stepNumber.classList.remove('bg-gray-300');
        stepNumber.classList.add('bg-primary-500');
      }
      
      // Scroll to the step
      stepElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  });
</script>
